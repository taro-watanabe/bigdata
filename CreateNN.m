function performance = CreateNN(x,t,train_size,hiddenLayerSize)
% CreateNN(A,b)
% solves an Input-Output Fitting problem with a Neural Network
% A=input data, b=output data are required
%
% The script accepts also the following usage: 
% CreateNN(A,b,train_size) 
% CreateNN(x,t,train_size,hiddenLayerSize)
%
% Default train_size value=0.7
% Default hiddenLayerSize=[10 10 10]
x=x';
t=t';
% Script generated by Neural Fitting app
if ~exist('train_size','var')
train_size=0.7;
end

if ~exist('hiddenLayerSize','var')
hiddenLayerSize = [10 10 10];
end


trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
% Create a Fitting Network
%hiddenLayerSize = [10 10 10];
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = train_size;
net.divideParam.valRatio = (1-train_size)/2;
net.divideParam.testRatio = (1-train_size)/2;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);


